class Solution {
public:
    bool wordPattern(string pattern, string s) {
        vector<string>words;
        int k=0;
        for(int i=0; i<s.length(); i++)
        {
            if(s[i]==' ')
            {
                words.push_back(s.substr(k,i-k));
                k=i+1;
            }
            if(i==s.length()-1)
            {
                words.push_back(s.substr(k,s.length()-k));
            }
        }

        // for(int i=0; i<words.size(); i++)
        // {
        //     cout<<words[i]<<" ";
        // }
        if(pattern.length()!=words.size())
        return false;

        unordered_map<char,string>mp;
        unordered_set<string>st;
        for(int i=0;i<pattern.length(); i++)
        {
            if(mp.find(pattern[i])!=mp.end())
            {
                if(mp[pattern[i]]!=words[i])
                return false;
            }
            else{
            if(st.find(words[i])!=st.end())
            return false;
            mp[pattern[i]]=words[i];
            st.insert(words[i]);
            }
        }
        return true;

    }
};
